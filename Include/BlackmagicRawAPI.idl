/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

/* BlackmagicRawAPI.idl */

import "unknwn.idl";

[uuid(7B7EFAC7-22B8-4EA1-8FAB-7583B6100B10),
version(0.1), helpstring("Blackmagic Codec API Library")]
library BlackmagicRawAPI
{

// Type Declarations

typedef SAFEARRAY SafeArray;
typedef SAFEARRAYBOUND SafeArrayBound;

// Enumeration Mapping

cpp_quote("#if 0")
cpp_quote("#endif")

/* Enum BlackmagicRawVariantType - Variant types that may be stored as metadata */

typedef [v1_enum] enum _BlackmagicRawVariantType {
    blackmagicRawVariantTypeEmpty                                = VT_EMPTY,
    blackmagicRawVariantTypeU8                                   = VT_UI1,
    blackmagicRawVariantTypeS16                                  = VT_I2,
    blackmagicRawVariantTypeU16                                  = VT_UI2,
    blackmagicRawVariantTypeS32                                  = VT_I4,
    blackmagicRawVariantTypeU32                                  = VT_UI4,
    blackmagicRawVariantTypeFloat32                              = VT_R4,
    blackmagicRawVariantTypeString                               = VT_BSTR,
    blackmagicRawVariantTypeSafeArray                            = VT_SAFEARRAY
} BlackmagicRawVariantType;

/* Enum BlackmagicRawResourceType - Used in IBlackmagicRawResourceManager */

typedef [v1_enum] enum _BlackmagicRawResourceType {
    blackmagicRawResourceTypeBufferCPU                           = /* 'cpub' */ 0x63707562,	// block of CPU memory
    blackmagicRawResourceTypeBufferMetal                         = /* 'metb' */ 0x6D657462,	// a MTLBuffer
    blackmagicRawResourceTypeBufferCUDA                          = /* 'cudb' */ 0x63756462,	// a CUdeviceptr
    blackmagicRawResourceTypeBufferOpenCL                        = /* 'oclb' */ 0x6F636C62	// a cl_mem
} BlackmagicRawResourceType;

/* Enum BlackmagicRawResourceFormat - Used for resource allocation */

typedef [v1_enum] enum _BlackmagicRawResourceFormat {
    blackmagicRawResourceFormatRGBAU8                            = /* 'rgba' */ 0x72676261,
    blackmagicRawResourceFormatBGRAU8                            = /* 'bgra' */ 0x62677261,
    blackmagicRawResourceFormatRGBU16Planar                      = /* '16pl' */ 0x3136706C,
    blackmagicRawResourceFormatRGBF32                            = /* 'f32s' */ 0x66333273,
    blackmagicRawResourceFormatRGBF32Planar                      = /* 'f32p' */ 0x66333270
} BlackmagicRawResourceFormat;

/* Enum BlackmagicRawResourceUsage - Used in IBlackmagicRawResourceManager */

typedef [v1_enum] enum _BlackmagicRawResourceUsage {
    blackmagicRawResourceUsageReadCPUWriteCPU                    = /* 'rcwc' */ 0x72637763,
    blackmagicRawResourceUsageReadGPUWriteGPU                    = /* 'rgwg' */ 0x72677767,
    blackmagicRawResourceUsageReadGPUWriteCPU                    = /* 'rgwc' */ 0x72677763,
    blackmagicRawResourceUsageReadCPUWriteGPU                    = /* 'rcwg' */ 0x72637767
} BlackmagicRawResourceUsage;

/* Enum BlackmagicRawPipeline - Used in IBlackmagicRawConfiguration. Each pipeline has different mappings to context/commandQueue */

typedef [v1_enum] enum _BlackmagicRawPipeline {
    blackmagicRawPipelineCPU                                     = /* 'cpub' */ 0x63707562,
    blackmagicRawPipelineCUDA                                    = /* 'cuda' */ 0x63756461,	// context/commandQueue maps to CUcontext/CUstream
    blackmagicRawPipelineMetal                                   = /* 'metl' */ 0x6D65746C,	// context/commandQueue maps to nil/MTLCommandQueue
    blackmagicRawPipelineOpenCL                                  = /* 'opcl' */ 0x6F70636C	// context/commandQueue maps to cl_context/cl_command_queue
} BlackmagicRawPipeline;

/* Enum BlackmagicRawInstructionSet - Used in IBlackmagicRawConfiguration */

typedef [v1_enum] enum _BlackmagicRawInstructionSet {
    blackmagicRawInstructionSetSSE41                             = /* 'se41' */ 0x73653431,
    blackmagicRawInstructionSetAVX                               = /* 'avx_' */ 0x6176785F,
    blackmagicRawInstructionSetAVX2                              = /* 'avx2' */ 0x61767832
} BlackmagicRawInstructionSet;

/* Enum BlackmagicRawAudioFormat - Used in IBlackmagicRawFileAudio */

typedef [v1_enum] enum _BlackmagicRawAudioFormat {
    blackmagicRawAudioFormatPCMLittleEndian                      = /* 'pcml' */ 0x70636D6C
} BlackmagicRawAudioFormat;

/* Enum BlackmagicRawResolutionScale - Used in IBlackmagicRawFrame */

typedef [v1_enum] enum _BlackmagicRawResolutionScale {
    blackmagicRawResolutionScaleFull                             = /* 'full' */ 0x66756C6C,
    blackmagicRawResolutionScaleHalf                             = /* 'half' */ 0x68616C66,
    blackmagicRawResolutionScaleQuarter                          = /* 'qrtr' */ 0x71727472,
    blackmagicRawResolutionScaleEighth                           = /* 'eith' */ 0x65697468,
    blackmagicRawResolutionScaleFullUpsideDown                   = /* 'lluf' */ 0x6C6C7566,
    blackmagicRawResolutionScaleHalfUpsideDown                   = /* 'flah' */ 0x666C6168,
    blackmagicRawResolutionScaleQuarterUpsideDown                = /* 'rtrq' */ 0x72747271,
    blackmagicRawResolutionScaleEighthUpsideDown                 = /* 'htie' */ 0x68746965
} BlackmagicRawResolutionScale;

/* Enum BlackmagicRawClipProcessingAttribute - Variant types that may be stored as metadata */

typedef [v1_enum] enum _BlackmagicRawClipProcessingAttribute {
    blackmagicRawClipProcessingAttributeColorScienceGen          = /* 'csgn' */ 0x6373676E,	// u16
    blackmagicRawClipProcessingAttributeGamma                    = /* 'gama' */ 0x67616D61,	// string
    blackmagicRawClipProcessingAttributeGamut                    = /* 'gamt' */ 0x67616D74,	// string
    blackmagicRawClipProcessingAttributeToneCurveContrast        = /* 'tcon' */ 0x74636F6E,	// float
    blackmagicRawClipProcessingAttributeToneCurveSaturation      = /* 'tsat' */ 0x74736174,	// float
    blackmagicRawClipProcessingAttributeToneCurveMidpoint        = /* 'tmid' */ 0x746D6964,	// float
    blackmagicRawClipProcessingAttributeToneCurveHighlights      = /* 'thih' */ 0x74686968,	// float
    blackmagicRawClipProcessingAttributeToneCurveShadows         = /* 'tsha' */ 0x74736861,	// float
    blackmagicRawClipProcessingAttributeToneCurveVideoBlackLevel = /* 'tvbl' */ 0x7476626C,	// u16
    blackmagicRawClipProcessingAttributeToneCurveBlackLevel      = /* 'tblk' */ 0x74626C6B,	// float
    blackmagicRawClipProcessingAttributeToneCurveWhiteLevel      = /* 'twit' */ 0x74776974,	// float
    blackmagicRawClipProcessingAttributeHighlightRecovery        = /* 'hlry' */ 0x686C7279,	// u16
    blackmagicRawClipProcessingAttributeAnalogGain               = /* 'gain' */ 0x6761696E,	// float
    blackmagicRawClipProcessingAttributePost3DLUTMode            = /* 'lutm' */ 0x6C75746D,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTName    = /* 'emln' */ 0x656D6C6E,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTTitle   = /* 'emlt' */ 0x656D6C74,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTSize    = /* 'emls' */ 0x656D6C73,	// u16
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTData    = /* 'emld' */ 0x656D6C64,	// float array, size*size*size*3 elements
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTName     = /* 'scln' */ 0x73636C6E,	// string
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTTitle    = /* 'sclt' */ 0x73636C74,	// string
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTSize     = /* 'scls' */ 0x73636C73,	// u16
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTData     = /* 'scld' */ 0x73636C64	// float array, size*size*size*3 elements
} BlackmagicRawClipProcessingAttribute;

/* Enum BlackmagicRawFrameProcessingAttribute - Variant types that may be stored as metadata */

typedef [v1_enum] enum _BlackmagicRawFrameProcessingAttribute {
    blackmagicRawFrameProcessingAttributeWhiteBalanceKelvin      = /* 'wbkv' */ 0x77626B76,	// u32
    blackmagicRawFrameProcessingAttributeWhiteBalanceTint        = /* 'wbtn' */ 0x7762746E,	// s16
    blackmagicRawFrameProcessingAttributeExposure                = /* 'expo' */ 0x6578706F,	// float
    blackmagicRawFrameProcessingAttributeISO                     = /* 'fiso' */ 0x6669736F	// u16
} BlackmagicRawFrameProcessingAttribute;

// Forward Declarations

interface IBlackmagicRaw;
interface IBlackmagicRawFactory;
interface IBlackmagicRawToneCurve;
interface IBlackmagicRawConstants;
interface IBlackmagicRawConfiguration;
interface IBlackmagicRawConfigurationEx;
interface IBlackmagicRawResourceManager;
interface IBlackmagicRawMetadataIterator;
interface IBlackmagicRawClipProcessingAttributes;
interface IBlackmagicRawPost3DLUT;
interface IBlackmagicRawFrameProcessingAttributes;
interface IBlackmagicRawProcessedImage;
interface IBlackmagicRawJob;
interface IBlackmagicRawCallback;
interface IBlackmagicRawClipAudio;
interface IBlackmagicRawFrame;
interface IBlackmagicRawFrameEx;
interface IBlackmagicRawManualDecoderFlow1;
interface IBlackmagicRawManualDecoderFlow2;
interface IBlackmagicRawClip;
interface IBlackmagicRawClipEx;

/* Interface IBlackmagicRaw - A single codec instance */

[
    object,
    uuid(5A540A06-1B62-4224-ACB0-A2385C6ED649),
    helpstring("A single codec instance")
] interface IBlackmagicRaw : IUnknown
{
    HRESULT OpenClip ([in] BSTR fileName, [out] IBlackmagicRawClip** clip);
    HRESULT SetCallback ([in] IBlackmagicRawCallback* callback);
    HRESULT FlushJobs (void);	// Blocking call which will only return once all jobs have been completed
};

/* Interface IBlackmagicRawFactory - Use this to create one or more Codec objects */

[
    object,
    uuid(74FEBEDC-12D6-490D-9A77-48F19E8F60CB),
    helpstring("Use this to create one or more Codec objects")
] interface IBlackmagicRawFactory : IUnknown
{
    HRESULT CreateCodec ([out] IBlackmagicRaw** codec);
};

/* Interface IBlackmagicRawToneCurve - Functions which provide useful tone curve operations */

[
    object,
    uuid(7E40C13D-3575-46B5-B2B7-85DAE1EEFD77),
    helpstring("Functions which provide useful tone curve operations")
] interface IBlackmagicRawToneCurve : IUnknown
{
    HRESULT GetToneCurve ([in] BSTR cameraType, [in] BSTR gamma, [in] unsigned short gen /* Color science gen */, [out] float* contrast, [out] float* saturation, [out] float* midpoint, [out] float* highlights, [out] float* shadows, [out] float* blackLevel, [out] float* whiteLevel, [out] unsigned short* videoBlackLevel);	// Query tone curve parameters for a specific camera and gamma. These are only currently available on Gamut: Blackmagic Design, Gamma: Blackmagic Design Film, Blackmagic Design Extended Video, Blackmagic Design Custom. Note: Custom gamma can define a tone curve per clip, see BlackmagicRawClipProcessingAttributes::GetToneCurveForCustomGamma()
    HRESULT EvaluateToneCurve ([in] BSTR cameraType, [in] unsigned short gen, [in] float contrast, [in] float saturation, [in] float midpoint, [in] float highlights, [in] float shadows, [in] float blackLevel, [in] float whiteLevel, [in] unsigned short videoBlackLevel, [out] float* array, [in] unsigned int arrayElementCount);	// Evaluates tone curve, returned buffer can be used to visualise curve
};

/* Interface IBlackmagicRawConstants - Constants which are used between IBlackmagicRawClipProcessingAttributes and IBlackmagicRawFrameProcessingAttributes are shared across clips */

[
    object,
    uuid(54210027-FA67-4EEC-9FF6-BE781945104E),
    helpstring("Constants which are used between IBlackmagicRawClipProcessingAttributes and IBlackmagicRawFrameProcessingAttributes are shared across clips")
] interface IBlackmagicRawConstants : IUnknown
{
    HRESULT GetClipProcessingAttributeRange ([in] BSTR cameraType, [in] BlackmagicRawClipProcessingAttribute attribute, [out] VARIANT* valueMin, [out] VARIANT* valueMax);
    HRESULT GetClipProcessingAttributeList ([in] BSTR cameraType, [in] BlackmagicRawClipProcessingAttribute attribute, [out] VARIANT* array /* optional */, [out] unsigned int* arrayElementCount /* optional */);
    HRESULT GetFrameProcessingAttributeRange ([in] BSTR cameraType, [in] BlackmagicRawFrameProcessingAttribute attribute, [out] VARIANT* valueMin, [out] VARIANT* valueMax);
    HRESULT GetFrameProcessingAttributeList ([in] BSTR cameraType, [in] BlackmagicRawFrameProcessingAttribute attribute, [out] VARIANT* array /* optional */, [out] unsigned int* arrayElementCount /* optional */);
    HRESULT GetISOListForAnalogGain ([in] BSTR cameraType, [in] float analogGain, [out] unsigned short* array /* optional */, [out] unsigned int* arrayElementCount /* optional */);
};

/* Interface IBlackmagicRawConfiguration - Configuration for Codec Object. Configuration properties are read on first OpenClip() */

[
    object,
    uuid(46F11AFB-16F4-483E-9333-69D94DC1344B),
    helpstring("Configuration for Codec Object. Configuration properties are read on first OpenClip()")
] interface IBlackmagicRawConfiguration : IUnknown
{
    HRESULT SetPipeline ([in] BlackmagicRawPipeline pipeline /* changing pipeline will cause the default resource manager to be re-created */, [in] void* pipelineContext, [in] void* pipelineCommandQueue);
    HRESULT GetPipeline ([out] BlackmagicRawPipeline* pipeline /* optional */, [out] void** pipelineContextOut /* optional */, [out] void** pipelineCommandQueueOut /* optional */);
    HRESULT IsPipelineSupported ([in] BlackmagicRawPipeline pipeline, [out] BOOL* pipelineSupported);	// Verifies relevant hardware/DLLs are available
    HRESULT SetCPUThreads ([in] unsigned int threadCount /* set 0 for default */);
    HRESULT GetCPUThreads ([out] unsigned int* threadCount);
    HRESULT GetMaxCPUThreadCount ([out] unsigned int* threadCount);
    HRESULT SetWriteMetadataPerFrame ([in] BOOL writePerFrame);	// if true, frame metadata will be written to only the relevant frame
    HRESULT GetWriteMetadataPerFrame ([out] BOOL* writePerFrame);
};

/* Interface IBlackmagicRawConfigurationEx - Extended Configuration for Codec Object */

[
    object,
    uuid(ACE9078F-ABA0-4B26-A954-EDA108DADA5A),
    helpstring("Extended Configuration for Codec Object")
] interface IBlackmagicRawConfigurationEx : IUnknown
{
    HRESULT GetResourceManager ([out] IBlackmagicRawResourceManager** resourceManager);
    HRESULT SetResourceManager ([in] IBlackmagicRawResourceManager* resourceManager /* setting null will restore the default resource manager */);	// Set to NULL to return to default resource manager
    HRESULT GetInstructionSet ([out] BlackmagicRawInstructionSet* instructionSet);
    HRESULT SetInstructionSet ([in] BlackmagicRawInstructionSet instructionSet);
};

/* Interface IBlackmagicRawResourceManager - Resource manager allows manual handling of CPU/GPU resource allocation */

[
    object,
    uuid(DC09804F-7005-4AA7-ADC9-12E0FE33896C),
    helpstring("Resource manager allows manual handling of CPU/GPU resource allocation")
] interface IBlackmagicRawResourceManager : IUnknown
{
    HRESULT CreateResource ([in] void* context, [in] void* commandQueue, [in] unsigned int sizeBytes, [in] BlackmagicRawResourceType type, [in] BlackmagicRawResourceUsage usage, [out] void** resource);
    HRESULT ReleaseResource ([in] void* context, [in] void* commandQueue, [in] void* resource, [in] BlackmagicRawResourceType type);
};

/* Interface IBlackmagicRawMetadataIterator - Iterating metadata */

[
    object,
    uuid(F85AE78D-5DC2-40BC-8C1D-D0D805523ADA),
    helpstring("Iterating metadata")
] interface IBlackmagicRawMetadataIterator : IUnknown
{
    HRESULT Next (void);	// When at last entry, calling Next() will return S_FALSE
    HRESULT GetKey ([out] BSTR* key);
    HRESULT GetData ([out] VARIANT* data);
};

/* Interface IBlackmagicRawClipProcessingAttributes - Clip attributes used during processing */

[
    object,
    uuid(AA3F216F-123F-4617-B741-6B6F497E94AA),
    helpstring("Clip attributes used during processing")
] interface IBlackmagicRawClipProcessingAttributes : IUnknown
{
    HRESULT GetClipAttribute ([in] BlackmagicRawClipProcessingAttribute attribute, [out] VARIANT* value);
    HRESULT SetClipAttribute ([in] BlackmagicRawClipProcessingAttribute attribute, [in] VARIANT* value);
    HRESULT GetPost3DLUT ([out] IBlackmagicRawPost3DLUT** lut);
};

/* Interface IBlackmagicRawPost3DLUT - 3D LUT object */

[
    object,
    uuid(72A53B50-BB40-4C69-83FB-58CF58AF35B6),
    helpstring("3D LUT object")
] interface IBlackmagicRawPost3DLUT : IUnknown
{
    HRESULT GetName ([out] BSTR* name);
    HRESULT GetTitle ([out] BSTR* title);
    HRESULT GetSize ([out] unsigned int* size);
    HRESULT GetResourceGPU ([in] void* context, [in] void* commandQueue, [out] BlackmagicRawResourceType* type, [out] void** resource);
    HRESULT GetResourceCPU ([out] void** resource);
    HRESULT GetResourceSizeBytes ([out] unsigned int* sizeBytes);
};

/* Interface IBlackmagicRawFrameProcessingAttributes - Frame attributes used during processing */

[
    object,
    uuid(659756A6-215B-47A7-A1A5-F5D6CD79D450),
    helpstring("Frame attributes used during processing")
] interface IBlackmagicRawFrameProcessingAttributes : IUnknown
{
    HRESULT GetFrameAttribute ([in] BlackmagicRawFrameProcessingAttribute attribute, [out] VARIANT* value);
    HRESULT SetFrameAttribute ([in] BlackmagicRawFrameProcessingAttribute attribute, [in] VARIANT* value);
};

/* Interface IBlackmagicRawProcessedImage - Processed image ready to display */

[
    object,
    uuid(D87A0F72-A883-42BB-8488-0089411C5035),
    helpstring("Processed image ready to display")
] interface IBlackmagicRawProcessedImage : IUnknown
{
    HRESULT GetWidth ([out] unsigned int* width);
    HRESULT GetHeight ([out] unsigned int* height);
    HRESULT GetResource ([out] void** resource);
    HRESULT GetResourceType ([out] BlackmagicRawResourceType* type);
    HRESULT GetResourceFormat ([out] BlackmagicRawResourceFormat* format);
    HRESULT GetResourceSizeBytes ([out] unsigned int* sizeBytes);
    HRESULT GetResourceContextAndCommandQueue ([out] void** context, [out] void** commandQueue);
};

/* Interface IBlackmagicRawJob - Asynchronous job object */

[
    object,
    uuid(34C05ACF-7118-45EA-8B71-887E0515395D),
    helpstring("Asynchronous job object")
] interface IBlackmagicRawJob : IUnknown
{
    HRESULT Submit (void);
    HRESULT Abort (void);
    HRESULT SetUserData ([in] void* userData);
    HRESULT GetUserData ([out] void** userData);
};

/* Interface IBlackmagicRawCallback - Callback for IBlackmagicRaw */

[
    object,
    uuid(762C4B66-2BDA-468B-BB7B-2C922A637A4A),
    helpstring("Callback for IBlackmagicRaw")
] interface IBlackmagicRawCallback : IUnknown
{
    void ReadComplete ([in] IBlackmagicRawJob* job, [in] HRESULT result, [in] IBlackmagicRawFrame* frame);
    void DecodeComplete ([in] IBlackmagicRawJob* job, [in] HRESULT result);
    void ProcessComplete ([in] IBlackmagicRawJob* job, [in] HRESULT result, [in] IBlackmagicRawProcessedImage* processedImage);
    void TrimProgress ([in] IBlackmagicRawJob* job, [in] float progress);
    void TrimComplete ([in] IBlackmagicRawJob* job, [in] HRESULT result);
    void SidecarMetadataParseWarning ([in] IBlackmagicRawClip* clip, [in] BSTR fileName, [in] unsigned int lineNumber, [in] BSTR info);	// offending line will be ignored
    void SidecarMetadataParseError ([in] IBlackmagicRawClip* clip, [in] BSTR fileName, [in] unsigned int lineNumber, [in] BSTR info);	// entire file will be ignored
};

/* Interface IBlackmagicRawClipAudio - Audio component for an opened movie clip */

[
    object,
    uuid(76D4ACED-E0D6-45BB-B547-56B7435B2A1D),
    helpstring("Audio component for an opened movie clip")
] interface IBlackmagicRawClipAudio : IUnknown
{
    HRESULT GetAudioFormat ([out] BlackmagicRawAudioFormat* format);
    HRESULT GetAudioBitDepth ([out] unsigned int* bitDepth);
    HRESULT GetAudioChannelCount ([out] unsigned int* channelCount);
    HRESULT GetAudioSampleRate ([out] unsigned int* sampleRate);
    HRESULT GetAudioSampleCount ([out] unsigned long long* sampleCount);
    HRESULT GetAudioSamples ([in] long long sampleFrameIndex, [in] void* buffer, [in] unsigned int bufferSizeBytes, [in] unsigned int maxSampleCount, [out] unsigned int* samplesRead /* optional */, [out] unsigned int* bytesRead /* optional */);
};

/* Interface IBlackmagicRawFrame - Frame of a clip */

[
    object,
    uuid(226A7BC7-16EE-4D78-B724-D3D0E073ADE7),
    helpstring("Frame of a clip")
] interface IBlackmagicRawFrame : IUnknown
{
    HRESULT GetFrameIndex ([out] unsigned long long* frameIndex);
    HRESULT GetTimecode ([out] BSTR* timecode);
    HRESULT GetMetadataIterator ([out] IBlackmagicRawMetadataIterator** iterator);
    HRESULT GetMetadata ([in] BSTR key, [out] VARIANT* value);
    HRESULT SetMetadata ([in] BSTR key, [in] VARIANT* value);	// To clear metadata to movie original, set value to NULL. This data is not saved to disk until SaveSideCar() is called
    HRESULT CloneFrameProcessingAttributes ([out] IBlackmagicRawFrameProcessingAttributes** frameProcessingAttributes);	// creates object with current frame processing attributes
    HRESULT SetResolutionScale ([in] BlackmagicRawResolutionScale resolutionScale);
    HRESULT GetResolutionScale ([out] BlackmagicRawResolutionScale* resolutionScale);
    HRESULT SetResourceFormat ([in] BlackmagicRawResourceFormat resourceFormat);
    HRESULT GetResourceFormat ([out] BlackmagicRawResourceFormat* resourceFormat);
    HRESULT CreateJobDecodeAndProcessFrame ([in] IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, [in] IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, [out] IBlackmagicRawJob** job);
};

/* Interface IBlackmagicRawFrameEx - provides extra information for use with IBlackmagicRawManualDecoder */

[
    object,
    uuid(F8C6C374-D7FB-4BD3-AD0B-C533464FF450),
    helpstring("provides extra information for use with IBlackmagicRawManualDecoder")
] interface IBlackmagicRawFrameEx : IUnknown
{
    HRESULT GetBitStreamSizeBytes ([out] unsigned int* bitStreamSizeBytes);
    HRESULT GetProcessedImageResolution ([out] unsigned int* width, [out] unsigned int* height);
};

/* Interface IBlackmagicRawManualDecoderFlow1 - Allowing manual decoding/processing of buffers, Flow1 is a pure CPU solution */

[
    object,
    uuid(278815A6-A3C1-47C7-A0A6-6754DEAE5E7A),
    helpstring("Allowing manual decoding/processing of buffers, Flow1 is a pure CPU solution")
] interface IBlackmagicRawManualDecoderFlow1 : IUnknown
{
    HRESULT PopulateFrameStateBuffer ([in] IBlackmagicRawFrame* frame, [in] IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, [in] IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, [out] void* frameState, [in] unsigned int frameStateSizeBytes);
    HRESULT GetFrameStateSizeBytes ([out] unsigned int* frameStateSizeBytes);
    HRESULT GetDecodedSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* decodedSizeBytes);
    HRESULT GetProcessedSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* processedSizeBytes);
    HRESULT GetPost3DLUTSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* post3DLUTSizeBytes);
    HRESULT CreateJobDecode ([in] void* frameStateBufferCPU, [in] void* bitStreamBufferCPU, [in] void* decodedBufferCPU, [out] IBlackmagicRawJob** job);
    HRESULT CreateJobProcess ([in] void* frameStateBufferCPU, [in] void* decodedBufferCPU, [in] void* processedBufferCPU, [in] void* post3DLUTBufferCPU, [out] IBlackmagicRawJob** job);
};

/* Interface IBlackmagicRawManualDecoderFlow2 - Allowing manual decoding/processing of buffers, Flow2 is a hybrid CPU/GPU solution */

[
    object,
    uuid(DBEC4C39-B4C2-4A65-AA8C-2B3C7F4777E3),
    helpstring("Allowing manual decoding/processing of buffers, Flow2 is a hybrid CPU/GPU solution")
] interface IBlackmagicRawManualDecoderFlow2 : IUnknown
{
    HRESULT PopulateFrameStateBuffer ([in] IBlackmagicRawFrame* frame, [in] IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, [in] IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, [out] void* frameState, [in] unsigned int frameStateSizeBytes);
    HRESULT GetFrameStateSizeBytes ([out] unsigned int* frameStateSizeBytes);
    HRESULT GetDecodedSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* decodedSizeBytes);
    HRESULT GetWorkingSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* workingSizeBytes);
    HRESULT GetProcessedSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* processedSizeBytes);
    HRESULT GetPost3DLUTSizeBytes ([in] void* frameStateBufferCPU, [out] unsigned int* post3DLUTSizeBytes);
    HRESULT CreateJobDecode ([in] void* frameStateBufferCPU, [in] void* bitStreamBufferCPU, [in] void* decodedBufferCPU, [out] IBlackmagicRawJob** job);
    HRESULT CreateJobProcess ([in] void* context, [in] void* commandQueue, [in] void* frameStateBufferCPU, [in] void* decodedBufferGPU, [in] void* workingBufferGPU /* additional working buffer */, [in] void* processedBufferGPU, [in] void* post3DLUTBufferGPU, [out] IBlackmagicRawJob** job);	// Create a job to process a frame. This is performed on the specified GPU. After this process is complete a final processed image will be provided via a OnProcessComplete() callback
};

/* Interface IBlackmagicRawClip - Opened movie clip */

[
    object,
    uuid(408F758F-347F-4CDA-BA9B-89B6F15603CF),
    helpstring("Opened movie clip")
] interface IBlackmagicRawClip : IUnknown
{
    HRESULT GetWidth ([out] unsigned int* width);
    HRESULT GetHeight ([out] unsigned int* height);
    HRESULT GetFrameRate ([out] float* frameRate);
    HRESULT GetFrameCount ([out] unsigned long long* frameCount);
    HRESULT GetTimecodeForFrame ([in] unsigned long long frameIndex, [out] BSTR* timecode);
    HRESULT GetMetadataIterator ([out] IBlackmagicRawMetadataIterator** iterator);
    HRESULT GetMetadata ([in] BSTR key, [out] VARIANT* value);
    HRESULT SetMetadata ([in] BSTR key, [in] VARIANT* value);	// To clear metadata to movie original, set value to NULL. This data is not saved to disk until SaveSideCar() is called
    HRESULT GetCameraType ([out] BSTR* cameraType /* used by IBlackmagicRawConstants */);
    HRESULT CloneClipProcessingAttributes ([out] IBlackmagicRawClipProcessingAttributes** clipProcessingAttributes);	// creates object with current clip processing attributes
    HRESULT GetMulticardFileCount ([out] unsigned int* multicardFileCount);
    HRESULT IsMulticardFilePresent ([in] unsigned int index, [out] BOOL* isMulticardFilePresent);
    HRESULT GetSidecarFileAttached ([out] BOOL* isSidecarFileAttached);	// Check for successfully parsed sidecar file, which is automatically loaded upon opening of a clip
    HRESULT SaveSidecarFile (void);	// Save metadata to sidecar file
    HRESULT ReloadSidecarFile (void);	// Reload metadata from sidecar file
    HRESULT CreateJobReadFrame ([in] unsigned long long frameIndex, [out] IBlackmagicRawJob** job);	// Create a job to read a frame
    HRESULT CreateJobTrim ([in] BSTR fileName, [in] unsigned long long frameIndex, [in] unsigned long long frameCount, [in] IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optional */, [in] IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optional */, [out] IBlackmagicRawJob** job);
};

/* Interface IBlackmagicRawClipEx - Extended use of IBlackmagicRawClip, to pass custom bitstream */

[
    object,
    uuid(D260C7D0-93BD-4D68-B600-93B4CAB7F870),
    helpstring("Extended use of IBlackmagicRawClip, to pass custom bitstream")
] interface IBlackmagicRawClipEx : IUnknown
{
    HRESULT GetMaxBitStreamSizeBytes ([out] unsigned int* maxBitStreamSizeBytes);
    HRESULT GetBitStreamSizeBytes ([in] unsigned long long frameIndex, [out] unsigned int* bitStreamSizeBytes);
    HRESULT CreateJobReadFrame ([in] unsigned long long frameIndex, [out] void* bitStream /* optional */, [in] unsigned int bitStreamSizeBytes /* optional */, [out] IBlackmagicRawJob** job);
    HRESULT QueryTimecodeInfo ([out] unsigned int* baseFrameIndex, [out] BOOL* isDropFrameTimecode);
};

/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(D630D04C-1434-4BF8-8801-E2AC1F56C6BA),
    helpstring("CBlackmagicRawFactory Class")
] coclass CBlackmagicRawFactory
{
    [default] interface IBlackmagicRawFactory;
};

// import deprecated interfaces
};
